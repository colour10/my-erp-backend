
    
<!-- UMD Component, async/await polyfills through promises -->

    <script src="https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"></script>
<script type="text/javascript" src="https://unpkg.com/vue-simple-suggest"></script>
<script type="text/javascript" src="https://unpkg.com/vue-simple-suggest@1.5.1"></script>
                                                              <!-- Specific version -->

<!-- CSS -->
<link rel="stylesheet" href="https://unpkg.com/vue-simple-suggest/dist/styles.css">

<!-- If you need polyfills, use IIFE verision below -->
<!-- IIFE build includes ALL polyfills: Object.assign, Promises, Generators, Async/Await! -->
<script type="text/javascript" src="https://unpkg.com/vue-simple-suggest/dist/iife.js"></script>

  

<table>
<tr>
    <td>框架</td>
    <td><div id="app2"><vue-simple-suggest
    v-model="chosen"
    :list="simpleSuggestionList"
    :filter-by-query="true">
<!-- Filter by input text to only show the matching results -->
<input name="keyword" id="keyword">
  </vue-simple-suggest></div></td>
  <td>固定数组</td>
</tr>

<tr>
    <td>检索</td>
    <td><div id="app"><vue-simple-suggest
    v-model="chosen"
    :list="ajaxList"
    :filter-by-query="true">
<!-- Filter by input text to only show the matching results -->
  </vue-simple-suggest></div>
  </td>
  <td>AJAX</td>
</tr>
</table>
<script>
  Vue.component('vue-simple-suggest', VueSimpleSuggest)
  
  new Vue({ 
    el: '#app2',
    data() {
      return {
        chosen: ''
      }
    },
    methods: {
      simpleSuggestionList() {
        return [
          'Vue.js',
          'React.js',
          'Angular.js',
          'jQuery',
          "Phalcon"
        ]
      }
    }
  })
  
  new Vue({ 
    el: '#app',
    data() {
      return {
        chosen: ''
      }
    },
    methods: {
      ajaxList(inputValue) {
        return new Promise((resolve, reject) => {
          let url = `https://en.wikipedia.org/w/api.php?origin=*&action=opensearch&namespace=*&search=${inputValue}&limit=10&namespace=0&format=json`
          fetch(url).then(response => {
            if (!response.ok) {
              reject()
            }

            response.json().then(json => {
              resolve(json[1])
            }).catch(e => {
              reject(e)
            })
          }).catch(error => {
            this.loading = false
            reject(error)
          })
        })
      }
    }
  })
  
</script>